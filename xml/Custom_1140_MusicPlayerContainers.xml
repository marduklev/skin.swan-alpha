<?xml version="1.0" encoding="utf-8"?>
<window type="dialog" id="1140">
	<animation effect="fade" start="0" end="100" time="250">WindowOpen</animation>
	<animation effect="fade" start="100" end="0" time="250">WindowClose</animation>
	<!-- <onload condition="!String.IsEmpty(Window(Home).Property(culrc.running))">Dialog.Close(script-cu-lrclyrics-main.xml)</onload> -->
	<defaultcontrol>7000</defaultcontrol>
	<onunload>ClearProperty(CurrentPlaylistVisible,home)</onunload>
	<controls>
	<control type="list" id="699">
		<description>getinfo</description>
		<include>HiddenContainer</include>
		<onup>700</onup>
		<ondown>700</ondown>
		<onleft>700</onleft>
		<onright>700</onright>
		<ondown>700</ondown>
		<content limit="1">$VAR[CurrentlyPlayingItem]</content>
	</control>
	<include condition="String.IsEqual(Window(home).Property(CurrentPlaylistVisible),mediawindow) + !Window.IsActive(1110)" content="MediaWindow_Playlist">
		<param name="posy" value="0" />
		<param name="top" value="20%" />
		<param name="height" value="80%" />
		<param name="container_height" value="90%" />
		<param name="color_main" value="$VAR[color_spotlightlib_main]" /> 
		<param name="color_secondary" value="$VAR[color_spotlightlib_secondary]" /> 
		<param name="color_accent" value="$VAR[color_spotlightlib_accent]" />
		<control type="group">
			<width>100</width>
			<height>100%</height>
			<right>0</right>
			<animation effect="slide" start="0,0" end="-480,0" time="300" tween="cubic" easing="in">WindowOpen</animation>
			<animation effect="slide" end="0,0" start="-480,0" time="250" tween="cubic" easing="in">WindowClose</animation>
			<animation effect="fade" start="0" end="100" time="100" tween="quadratic" easing="inout" condition="ControlGroup(700).HasFocus()">conditional</animation>
			<animation effect="slide" start="0,0" end="100,0" time="300" tween="cubic" easing="in" condition="!ControlGroup(700).HasFocus()">conditional</animation>
			<!-- <control type="image">
				<top>-15%</top>
				<height>130%</height>
				<bordersize>1,0,1,0</bordersize>
				<bordertexture colordiffuse="$VAR[color_global_background_layer1]">diffuse/gradientcenter.png</bordertexture>
				<texture colordiffuse="$VAR[color_spotlightlib_accent]" diffuse="colors/white10.png">diffuse/gradientcenter.png</texture>
			</control> -->
			<control type="image">
				<top>-15%</top>
				<height>130%</height>
				<bordersize>1,0,1,0</bordersize>
				<bordertexture colordiffuse="$VAR[color_spotlightlib_accent]">diffuse/gradientcenter.png</bordertexture>
				<texture colordiffuse="$VAR[color_global_background_layer1]">diffuse/gradientcenter.png</texture>
			</control>
			<control type="grouplist" id="700">
					<top>8%</top>
					<description>player controls</description>
					<orientation>vertical</orientation>
					<aligny>center</aligny>
					<align>center</align>
					<itemgap>15</itemgap>
					<usecontrolcoords>true</usecontrolcoords>
					<onup>700</onup>
					<ondown>700</ondown>
					<onright>7000</onright>
					<onleft>ClearProperty(CurrentPlaylistVisible,home)</onleft>
					<onleft>close</onleft>
					<centerleft>51%</centerleft>
					<width>50</width>
					<control type="button" id="701">
						<width>45</width>
						<height>45</height>
						<visible>player.hasaudio</visible>
						<texturefocus colordiffuse="$VAR[color_spotlightlib_accent]">buttons/osd/userrating_fo.png</texturefocus>
						<texturenofocus colordiffuse="$VAR[color_spotlightlib_secondary]">buttons/osd/userrating_fo.png</texturenofocus>
						<onclick>SetRating</onclick>
					</control>
					<control type="button" id="702">
						<visible>!Container(699).IsUpdating + Integer.IsEqual(Container(699).NumItems,1)</visible>
						<width>45</width>
						<height>45</height>
						<label />
						<texturefocus colordiffuse="$VAR[color_spotlightlib_accent]">buttons/osd/infonoborder.png</texturefocus>
						<texturenofocus colordiffuse="$VAR[color_spotlightlib_secondary]">buttons/osd/infonoborder.png</texturenofocus>
						<onclick condition="true">setfocus(699)</onclick>
						<onclick condition="true">action(info)</onclick>
					</control>
					<control type="button" id="703">
						<description>get playlist</description>
						<visible>false</visible>
						<visible>MusicPlayer.HasPrevious | MusicPlayer.HasNext</visible>
						<width>45</width>
						<height>45</height>
						<label />
						<texturefocus colordiffuse="$VAR[color_spotlightlib_accent]">buttons/osd/playlist_fo.png</texturefocus>
						<texturenofocus colordiffuse="$VAR[color_spotlightlib_secondary]">buttons/osd/playlist_fo.png</texturenofocus>
						<onclick>SetProperty(CurrentPlaylistVisible,small,home)</onclick>
						<onclick>ActivateWindow(1140)</onclick>
					</control>
					<control type="button" id="704">
						<width>45</width>
						<height>45</height>
						<label />
						<texturefocus colordiffuse="$VAR[color_spotlightlib_accent]">buttons/osd/fullscreen.png</texturefocus>
						<texturenofocus colordiffuse="$VAR[color_spotlightlib_secondary]">buttons/osd/fullscreen.png</texturenofocus>
						<onclick>dialog.close(all,true)</onclick>
						<onclick>fullscreen</onclick>
					</control>
					<include content="spacer_h">
						<param name="visible" value="Player.HasAudio"/>
						<param name="id" value="705"/>
						<param name="gap" value="5"/>
					</include>
					<control type="button" id="706">
						<visible>MusicPlayer.HasPrevious | Playlist.IsRepeat</visible>
						<width>45</width>
						<height>45</height>
						<label />
						<texturefocus colordiffuse="$VAR[color_spotlightlib_accent]">buttons/osd/previous_fo.png</texturefocus>
						<texturenofocus colordiffuse="$VAR[color_spotlightlib_secondary]">buttons/osd/previous_fo.png</texturenofocus>
						<onclick>PlayerControl(previous)</onclick>
					</control>
					<control type="togglebutton" id="707">
						<width>45</width>
						<height>45</height>
						<label />
						<altlabel />
						<texturefocus colordiffuse="$VAR[color_spotlightlib_accent]">buttons/osd/play_fo.png</texturefocus>
						<texturenofocus colordiffuse="$VAR[color_spotlightlib_secondary]">buttons/osd/play_fo.png</texturenofocus>
						<alttexturefocus colordiffuse="$VAR[color_spotlightlib_accent]">buttons/osd/pause_fo.png</alttexturefocus>
						<alttexturenofocus colordiffuse="$VAR[color_spotlightlib_secondary]">buttons/osd/pause_fo.png</alttexturenofocus>
						<usealttexture>!Player.Paused</usealttexture>
						<onclick>PlayerControl(play)</onclick>
					</control>
					<control type="button" id="708">
						<width>45</width>
						<height>45</height>
						<label />
						<texturefocus colordiffuse="$VAR[color_spotlightlib_accent]">buttons/osd/stop_fo.png</texturefocus>
						<texturenofocus colordiffuse="$VAR[color_spotlightlib_secondary]">buttons/osd/stop_fo.png</texturenofocus>
						<onclick>PlayerControl(stop)</onclick>
					</control>
					<control type="button" id="709">
						<visible>MusicPlayer.HasNext | Playlist.IsRepeat</visible>
						<width>45</width>
						<height>45</height>
						<label />
						<texturefocus colordiffuse="$VAR[color_spotlightlib_accent]">buttons/osd/next_fo.png</texturefocus>
						<texturenofocus colordiffuse="$VAR[color_spotlightlib_secondary]">buttons/osd/next_fo.png</texturenofocus>
						<onclick>PlayerControl(next)</onclick>
					</control>
					<include content="spacer_h">
						<param name="id" value="710"/>
						<param name="gap" value="5" />
					</include>
					<control type="button" id="711">
						<visible>MusicPlayer.HasNext | Playlist.IsRepeat</visible>
						<width>45</width>
						<height>45</height>
						<label />
						<texturefocus colordiffuse="$VAR[color_spotlightlib_accent]">buttons/osd/repeat.png</texturefocus>
						<texturenofocus colordiffuse="$VAR[color_spotlightlib_secondary]">buttons/osd/repeat.png</texturenofocus>
						<onclick>PlayerControl(Repeat)</onclick>
						<onclick condition="!Playlist.IsRepeatOne + !Playlist.IsRepeat">Notification(Repeat,[B]A l l[/B],10,buttons/osd/repeatall.png)</onclick>
						<onclick condition="Playlist.IsRepeat">Notification(Repeat,[B]T i t l e[/B],10,buttons/osd/repeatone.png)</onclick>
						<onclick condition="Playlist.IsRepeatOne">Notification(Repeat,[B]D i s a b l e d[/B],10,buttons/osd/repeatoff.png)</onclick>
					</control>
					<control type="button" id="712">
						<description>toggle vs common, currently looks lika a bad symbol</description>
						<visible>MusicPlayer.HasNext | Playlist.IsRepeat</visible>
						<width>45</width>
						<height>45</height>
						<label />
						<texturefocus colordiffuse="$VAR[color_spotlightlib_accent]">buttons/osd/random.png</texturefocus>
						<texturenofocus colordiffuse="$VAR[color_spotlightlib_secondary]">buttons/osd/random.png</texturenofocus>
						<onclick>PlayerControl(Random)</onclick>
						<onclick condition="!Playlist.IsRandom">Notification(Random,[B]O n[/B],10,buttons/osd/random.png)</onclick>
						<onclick condition="Playlist.IsRandom">Notification(Random,[B]O f f[/B],10,buttons/osd/randomoff.png)</onclick>
					</control>
				</control>
		</control>
		<control type="group">
			<width>480</width>
			<height>20%</height>
			<right>-480</right>
			<animation effect="slide" start="0,0" end="-480,0" time="300" tween="cubic" easing="in">WindowOpen</animation>
			<animation effect="slide" end="0,0" start="-480,0" time="250" tween="cubic" easing="in">WindowClose</animation>
			<control type="image">
				<texture>colors/black.png</texture>
			</control>
			<control type="image">
				<bordersize>5,5,5,0</bordersize>
				<bordertexture colordiffuse="$VAR[color_global_background_layer1]">colors/white.png</bordertexture>
				<texture diffuse="colors/white20.png">$VAR[common_player_fanartbackground]</texture>
				<aspectratio aligny="top">scale</aspectratio>
			</control>
			<control type="label">
				<description> | [COLOR grey]$INFO[MusicPlayer.Album]$INFO[MusicPlayer.Year, (,)][/COLOR]</description>
				<animation effect="fade" end="40" condition="true">conditional</animation>
				<right>5</right>
				<left>5</left>
				<align>right</align>
				<height>20</height>
				<aligny>top</aligny>
				<textcolor>$VAR[color_spotlightlib_main]</textcolor>
				<label>$INFO[MusicPlayer.Artist] • $INFO[Player.Title]</label>
				<font>montserrat_14_extrabold</font>
			</control>
			<control type="textbox">
				<animation effect="fade" end="40" condition="true">conditional</animation>
				<right>5</right>
				<height>25</height>
				<bottom>2</bottom>
				<align>right</align>
				<width>100</width>
				<textcolor>$VAR[color_spotlightlib_main]</textcolor>
				<label>$INFO[Player.Time(mm:ss)]$INFO[Player.Duration(mm:ss), / ,]</label>
				<font>montserrat_14_extrabold</font>
			</control>
		</control>
	</include>
	<include condition="String.IsEqual(Window(home).Property(CurrentPlaylistVisible),mediawindow) + Window.IsActive(1110)" content="MediaWindow_Playlist" />
	<include condition="String.IsEmpty(Window(home).Property(CurrentPlaylistVisible)) + !Skin.HasSetting(MusicOSD_SmallPlaylist)">MusicOSD_CommonPlaylist</include>
	<include condition="[String.IsEmpty(Window(home).Property(CurrentPlaylistVisible)) + Skin.HasSetting(MusicOSD_SmallPlaylist)] | String.IsEqual(Window(home).Property(CurrentPlaylistVisible),small)">MusicOSD_SmallPlaylist</include>
	
	</controls>
</window>