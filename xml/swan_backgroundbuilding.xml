<?xml version="1.0" encoding="UTF-8"?>
<includes>
	
	<variable name="texture_profilelogin_background">
		<value condition="Skin.String(texture_profilelogin_background)">$INFO[Skin.String(texture_profilelogin_background)]</value>
		<value>resource://resource.images.skin.swan/backgroundimages/76256.jpg</value>
	</variable>
	<include name="HeaderBar">
		<param name="HasBGPanel" default="true" />
		
		<definition>
		<control type="group">
			<visible>!$EXP[Infodialog_IsActive]</visible>
			<visible>![Control.IsVisible(503) | Control.IsVisible(504)]</visible>
			<visible>String.IsEmpty(Window(home).Property(shortcutaction_inprogress))</visible>
			<animation type="Conditional" condition="Window.IsActive(shutdownmenu)">
				<effect type="fade" start="100" end="0" time="250" tween="sine" easing="out" />
				<effect type="zoom" center="50%,50%" start="100" end="0" time="300" tween="cubic" easing="out" />
			</animation>
			<animation reversible="true" effect="slide" start="0,0" end="0,-110" tween="quadratic" time="400" condition="Control.IsVisible(58) + !Control.HasFocus(58001)">conditional</animation>
			<width>100%</width>
			<height>110</height>	
				
			<control type="image">
				<description>BG PANEL</description>
				<visible>$PARAM[HasBGPanel]</visible>
				<width>100%</width>
				<height>100%</height>
				<texture colordiffuse="$VAR[color_header_backgroundpanel]">$VAR[texture_global_headerbar]</texture>
				<aspectratio>stretch</aspectratio>
			</control>
			
			<!-- left grouplist w25% profile ? + curent -->
			
			<control type="grouplist">
				<width>45%</width>
				<height>110</height>	
				<left>20</left>
				<orientation>horizontal</orientation>
				<itemgap>10</itemgap>
				<usecontrolcoords>true</usecontrolcoords>
				<align>left</align>
				
				<control type="group">
					<description>unlucky layout position...act custom and LoadProfile(), logoff()</description>
					<visible>!Skin.HasSetting(HideProfile_Header)</visible>
					<width>100</width>
					<height>110</height>	
					
					<control type="button" id="7777">
						<width>110</width>
						<height>110</height>
						<texturenofocus />
						<texturefocus />
						<onclick>System.LogOff</onclick>
					</control>
					
					<control type="image">
						<left>5</left>
						<top>3</top>
						<width>80</width>
						<height>80</height>	
						<bordersize>4</bordersize>
						<bordertexture colordiffuse="ff181818">artworkdiffuse/circle.png</bordertexture>
						<texture diffuse="artworkdiffuse/circle.png">$INFO[System.ProfileThumb]</texture>
						<aspectratio scalediffuse="true">scale</aspectratio>
					</control>
					<control type="label">
						<top>87</top>
						<width>85</width>
						<height>15</height>
						<align>center</align>
						<info>System.ProfileName</info>
						<font>debugtiny</font>
						<textcolor>$VAR[color_header_text_accent]</textcolor>
					</control>
					
				</control>
				<control type="image">
					<visible>!Skin.HasSetting(HideProfile_Header)</visible>
					<top>10</top>
					<height>90</height>
					<width>2</width>
					<texture colordiffuse="white">colors/white30.png</texture>
					<aspectratio align="right">stretch</aspectratio>
				</control>
				<control type="group">
					<description>Non media Cur Window</description>
					<visible>!Window.IsMedia</visible>
					<width>1650</width>
					<height>110</height>	
					<control type="label">
						<include content="pos_top" condition="!Skin.HasSetting(HideSubHeaderInfo)">
							<param name="top" value="10" />
						</include>
						<include content="pos_top" condition="Skin.HasSetting(HideSubHeaderInfo)">
							<param name="top" value="25" />
						</include>
						<height>50</height>
						<align>left</align>
						<label>$VAR[Header_InfoTop]</label>
						<!-- <label>$VAR[Header_InfoTop] [I]$VAR[CurrentContent_Info][/I]</label> -->
						<font>HeaderBar_Media</font>
						<textcolor>$VAR[color_header_text_main]</textcolor>
					</control>
					<control type="label">
						<top>60</top>
						<height>30</height>
						<align>left</align>
						<label>$VAR[CurrentContent_Info]</label>
						<font>DialogListItem</font>
						<textcolor>$VAR[color_header_text_main]</textcolor>
						<visible>!Skin.HasSetting(HideSubHeaderInfo)</visible>
					</control>
				</control>
			</control>
			<!-- right max 480 on 1080p, due to group cond incl based on system res_h -->
			<control type="grouplist">
				<width>25%</width>
				<height>110</height>	
				<right>10</right>
				<orientation>horizontal</orientation>
				<itemgap>10</itemgap>
				<usecontrolcoords>true</usecontrolcoords>
				<align>right</align>
				<visible>![Skin.HasSetting(HideTimeDate_Header) + Skin.HasSetting(HideWeather_Header)]</visible>
				<control type="group">
					<description>time and date</description>
					<visible>!Skin.HasSetting(HideTimeDate_Header)</visible>
					<top>10</top>
					<width>370</width>
					<height>110</height>
					<control type="label">
						<width>100%</width>
						<height>50</height>
						<align>right</align>
						<info>System.Time</info>
						<font>font_clock</font>
						<textcolor>$VAR[color_header_text_accent]</textcolor>
					</control>
					<control type="label">
						<right>2</right>
						<top>60</top>
						<width>100%</width>
						<height>20</height>
						<align>right</align>
						<info>System.Date</info>
						<font>HeaderBar_Sub</font>
						<textcolor>$VAR[color_header_text_main]</textcolor>
					</control>
				</control>
				
				<control type="group">
					<description>weather</description>
					<visible>!Window.IsActive(weather)</visible>
					<visible>!Skin.HasSetting(HideWeather_Header) + [!String.Contains(Weather.Temperature,$LOCALIZE[503]) | [!String.IsEqual(Weather.fanartcode,na) + Weather.IsFetched]]</visible>
					<width>110</width>
					<height>110</height>
					<control type="image">
						<left>8</left>
						<description>seperator</description>
						<visible>!Skin.HasSetting(HideTimeDate_Header)</visible>
						<top>9</top>
						<height>90</height>
						<width>1</width>
						<texture colordiffuse="white">colors/white30.png</texture>
						<aspectratio align="left">stretch</aspectratio>
					</control>
					<control type="label">
						<top>65</top>
						<width>110</width>
						<height>20</height>
						<align>center</align>
						<aligny>bottom</aligny>
						<label>$INFO[Weather.Temperature]</label>
						<font>font23_title</font>
						<textcolor>$VAR[color_header_text_main]</textcolor>
					</control>
					<control type="image">
						<top>5</top>
						<height>65</height>
						<width>110</width>
						<texture colordiffuse="$VAR[color_header_text_main]">$INFO[Weather.FanartCode,resource://resource.images.weathericons.outline-hd/,.png]</texture>
						<!-- <texture>$INFO[Weather.FanartCode,resource://resource.images.weathericons.outline/,.png]</texture>
						 -->
						<!-- <bordertexture>$INFO[Weather.FanartCode,resource://resource.images.weathericons.outline/,.jpg]</bordertexture> -->
						<!-- , skinstring equal addon path -->
						<aspectratio align="center">keep</aspectratio>
					</control>
				</control>
			</control>
			
			<!-- center main header media -->
			<control type="group">
				<visible>Window.IsMedia</visible>
				<width>50%</width>
				<height>110</height>	
				<left>25%</left>
				<right>25%</right>
				
				<control type="label">
					<include content="pos_top" condition="!Skin.HasSetting(HideSubHeaderInfo)">
						<param name="top" value="10" />
					</include>
					<include content="pos_top" condition="Skin.HasSetting(HideSubHeaderInfo)">
						<param name="top" value="35" />
					</include>
					<height>50</height>
					<align>center</align>
					<label>$VAR[Header_InfoTop]</label>
					<font>HeaderBar_Media</font>
					<textcolor>$VAR[color_header_text_main]</textcolor>
				</control>
				
				<control type="label">
					<top>60</top>
					<height>30</height>
					<align>center</align>
					<label>$VAR[CurrentContent_Info]</label>
					<font>DialogListItem</font>
					<textcolor>$VAR[color_header_text_main]</textcolor>
					<visible>!Skin.HasSetting(HideSubHeaderInfo)</visible>
					<visible>!Control.IsVisible(58)</visible>
				</control>
				
			</control>
			
		</control>
				
		</definition>
	</include>
	
	
	<!-- or conditional Heading result 
		- localized string content - folderpath
		eg actors (movies)
		eg
		<value condition="
            [String.IsEqual(Container.FolderName,$LOCALIZE[20386])] | 
            [String.Contains(Container.FolderPath,/tags)]">[UPPERCASE][B]$INFO[Container.FolderName][/B][/UPPERCASE]
        </value>
	
		<value condition="String.Contains(Container.FolderPath,movies/) + String.IsEqual(Container.FolderName,$LOCALIZE[515]) + Container.Content(genres)">[UPPERCASE][B]$INFO[Container.FolderName,, ($LOCALIZE[342])][/B][/UPPERCASE]</value>
		<value condition="String.IsEqual(Container.FolderName,$LOCALIZE[515]) + Container.Content(genres)">[UPPERCASE][B]$INFO[Container.FolderName][/B][/UPPERCASE]</value>
		<value condition="String.Contains(Container.FolderPath,movies/genre)">[UPPERCASE][B]$INFO[Container.FolderName] $LOCALIZE[342][/B][/UPPERCASE]</value>
	-->	
	
	<!-- 
	Window(Home).Property(key) 	The home window has the following info labels.

Movies.Count, 
Movies.Watched, 
Movies.UnWatched, 

TVShows.Count, 
TVShows.Watched, 
TVShows.UnWatched, 

Episodes.Count, 
Episodes.Watched, 
Episodes.UnWatched, 

MusicVideos.Count, 
MusicVideos.Watched, 
MusicVideos.UnWatched, 

Music.SongsCount, 
Music.AlbumsCount, 
Music.ArtistsCount

LatestMovie.[1-10].Title, LatestMovie.[1-10].Year, LatestMovie.[1-10].RunningTime, LatestMovie.[1-10].Rating, LatestMovie.[1-10].Plot, LatestMovie.[1-10].Trailer, LatestMovie.[1-10].Thumb, LatestMovie.[1-10].Fanart, LatestMovie.[1-10].Path

LatestEpisode.[1-10].ShowTitle, LatestEpisode.[1-10].EpisodeTitle, LatestEpisode.[1-10].EpisodeNo, LatestEpisode.[1-10].EpisodeSeason, LatestEpisode.[1-10].EpisodeNumber, LatestEpisode.[1-10].Rating, LatestEpisode.[1-10].Plot, LatestEpisode.[1-10].Thumb, LatestEpisode.[1-10].ShowThumb, LatestEpisode.[1-10].SeasonThumb, LatestEpisode.[1-10].Fanart, LatestEpisode.[1-10].Path

LatestMusicVideo.[1-10].Title, LatestMusicVideo.[1-10].Thumb, LatestMusicVideo.[1-10].Year, LatestMusicVideo.[1-10].Plot, LatestMusicVideo.[1-10].RunningTime, LatestMusicVideo.[1-10].Path, LatestMusicVideo.[1-10].Artist, LatestMusicVideo.[1-10].Fanart

LatestSong.[1-10].Title, LatestSong.[1-10].Artist, LatestSong.[1-10].Album, LatestSong.[1-10].Year, LatestSong.[1-10].Rating, LatestSong.[1-10].Thumb, LatestSong.[1-10].Fanart, LatestSong.[1-10].Path

LatestAlbum.[1-10].Title, LatestAlbum.[1-10].Artist, LatestAlbum.[1-10].Year, LatestAlbum.[1-10].Rating, LatestAlbum.[1-10].Thumb, LatestAlbum.[1-10].Fanart, LatestAlbum.[1-10].Path  -->
	<variable name="Header_InfoTop">
		<value condition="Window.Is(1120)">[UPPERCASE][B]$LOCALIZE[283][/B][/UPPERCASE]</value>
		<value condition="Window.IsActive(1122)">$LOCALIZE[20410]</value>
		<value condition="String.IsEqual(Container.FolderName,$LOCALIZE[10024]) + Container.Content(movies)">[UPPERCASE][B]$LOCALIZE[342][/B][/UPPERCASE]</value>
		<value condition="String.IsEqual(Container.FolderName,$LOCALIZE[10024]) + Container.Content(tvshows)">[UPPERCASE][B]$LOCALIZE[20343][/B][/UPPERCASE]</value>
		<value condition="String.IsEqual(Container.FolderName,$LOCALIZE[10024]) + Container.Content(seasons)">[UPPERCASE][B]$LOCALIZE[33054][/B][/UPPERCASE]</value>
 		<value condition="String.IsEqual(Container.FolderName,$LOCALIZE[10024]) + Container.Content(sets)">[UPPERCASE][B]$LOCALIZE[20434][/B][/UPPERCASE]</value>
		<value condition="String.IsEqual(Container.FolderName,$LOCALIZE[10024]) + Container.Content(images)">[UPPERCASE][B]$LOCALIZE[10002][/B][/UPPERCASE]</value>
		<value condition="String.IsEqual(Container.FolderName,$LOCALIZE[10024]) + Container.Content(artists)">[UPPERCASE][B]$LOCALIZE[133][/B][/UPPERCASE]</value>
		<value condition="String.IsEqual(Container.FolderName,$LOCALIZE[10024]) + Container.Content(albums)">[UPPERCASE][B]$LOCALIZE[132][/B][/UPPERCASE]</value>
		<value condition="String.IsEqual(Container.FolderName,$LOCALIZE[10024]) + Container.Content(musicvideos)">[UPPERCASE][B]$LOCALIZE[20389][/B][/UPPERCASE]</value>
		<value condition="String.IsEqual(Container.FolderName,$LOCALIZE[10024]) + Container.Content(songs)">[UPPERCASE][B]$LOCALIZE[134][/B][/UPPERCASE]</value>
		
		<value condition="Container.Content(episodes) + [Control.IsVisible(503) | Control.IsVisible(504)]">[UPPERCASE][B]$INFO[ListItem.Season,$LOCALIZE[20373]  ,][/B][/UPPERCASE]</value>
		
		<value condition="Container.Content(episodes)">[UPPERCASE][B]$INFO[Container.ShowTitle][/B][/UPPERCASE]</value>
		<value condition="!String.IsEmpty(Container.FolderName)">[UPPERCASE][B]$INFO[Container.FolderName][/B][/UPPERCASE]</value>
		<value condition="Window.IsMedia">[UPPERCASE][B]$INFO[System.CurrentWindow][/B][/UPPERCASE]</value>
		<value>$INFO[System.CurrentWindow]</value>
	</variable>
	<variable name="CurrentContent_Info">
		<value condition="Window.Is(1120)">Search Term Is : [B][COLOR=$VAR[color_header_text_accent]]$INFO[Skin.string(searchterm)][/COLOR][/B]</value>
		<value condition="Window.IsActive(1122)">[B][COLOR=$VAR[color_header_text_accent]]$INFO[listitem.title][/COLOR][/B]</value>
		<value condition="Container.Content(movies)">$LOCALIZE[20161] : [COLOR=$VAR[color_header_text_accent]]$INFO[Window(Home).Property(Movies.Count)][/COLOR] [B]|[/B] $LOCALIZE[16101] : [COLOR=$VAR[color_header_text_accent]]$INFO[Window(Home).Property(Movies.UnWatched)][/COLOR]</value>
		<value condition="Container.Content(tvshows)">$LOCALIZE[20161] : [COLOR=$VAR[color_header_text_accent]]$INFO[Window(Home).Property(TVShows.Count)][/COLOR] [B]|[/B] $LOCALIZE[16101] : [COLOR=$VAR[color_header_text_accent]]$INFO[Window(Home).Property(TVShows.UnWatched)][/COLOR]</value>
		<value condition="Container.Content(episodes)">[UPPERCASE][B]$INFO[listitem.season,$LOCALIZE[20373]  ,  •  ][/B][/UPPERCASE]$LOCALIZE[20161] : [COLOR=$VAR[color_header_text_accent]]$INFO[Container(id).NumItems][/COLOR] [B]|[/B] $LOCALIZE[16101] : [COLOR=$VAR[color_header_text_accent]]$INFO[Container.TotalUnWatched][/COLOR]</value>
		<value condition="Window.IsMedia">$LOCALIZE[20161] : [COLOR=$VAR[color_header_text_accent]]$INFO[Container(id).NumItems][/COLOR] [B]|[/B] $LOCALIZE[16101] : [COLOR=$VAR[color_header_text_accent]]$INFO[Container.TotalUnWatched][/COLOR]</value>
		<value condition="Window.IsActive(weather)">[COLOR=$VAR[color_header_text_accent]]$INFO[Window(weather).Property(WeatherProvider)][/COLOR]</value>
		<value>[COLOR=$VAR[color_header_text_accent]]$INFO[System.CurrentControl][/COLOR]</value>
	</variable>
	<variable name="CurrentContent_Info_left">
		<value condition="Window.Is(1120)">Search Term Is</value>
		<value condition="Container.Content(movies)">$LOCALIZE[20161] : [COLOR=$VAR[color_header_text_accent]]$INFO[Window(Home).Property(Movies.Count)][/COLOR]</value>
		<value condition="Container.Content(tvshows)">$LOCALIZE[20161] : [COLOR=$VAR[color_header_text_accent]]$INFO[Window(Home).Property(TVShows.Count)][/COLOR]</value>
		<value>$LOCALIZE[20161] : [COLOR=$VAR[color_header_text_accent]]$INFO[Container(id).NumItems][/COLOR]</value>
	</variable>
	<variable name="CurrentContent_Info_center">
		<value condition="Window.Is(1120)"> [B]:[/B] </value>
		<value> [B]|[/B] </value>
	</variable>
	<variable name="CurrentContent_Info_right">
		<value condition="Window.Is(1120)">[B][COLOR=$VAR[color_header_text_accent]]$INFO[Skin.string(searchterm)][/COLOR][/B]</value>
		<value condition="Container.Content(movies)">$LOCALIZE[16101] : [COLOR=$VAR[color_header_text_accent]]$INFO[Window(Home).Property(Movies.UnWatched)][/COLOR]</value>
		<value condition="Container.Content(tvshows)">$LOCALIZE[16101] : [COLOR=$VAR[color_header_text_accent]]$INFO[Window(Home).Property(TVShows.UnWatched)][/COLOR]</value>
		<value>$LOCALIZE[16101] : [COLOR=$VAR[color_header_text_accent]]$INFO[Container.TotalUnWatched][/COLOR]</value>
	</variable>
	
	
	<include name="DialogBackground_TriplePanel">
		<!-- fs bg -->
		<control type="image">
			<description>center,use cdiffuse global middle layer</description>
			<left>0</left>
			<top>0</top>
			<width>100%</width>
			<height>100%</height>
			<texture>colors/white.png</texture>
			<colordiffuse>$VAR[color_global_background_layer2]</colordiffuse>
			<aspectratio>stretch</aspectratio>
        </control>
		
		<!-- change cdiffuse alpha to #alpha#000000png -->
		<control type="image">
			<description>leftbg alpha60</description>
			<left>0</left>
			<top>0</top>
			<width>33.3%</width>
			<height>100%</height>
            <texture>colors/white.png</texture>
            <colordiffuse>99000000</colordiffuse>
			<aspectratio>stretch</aspectratio>
        </control>
		<control type="image">
			<description>center alpha80</description>
			<left>33.3%</left>
			<top>0</top>
			<width>33.3%</width>
			<height>100%</height>
            <texture>colors/white.png</texture>
            <colordiffuse>CC000000</colordiffuse>
			<aspectratio>stretch</aspectratio>
        </control>
		<control type="image">
			<description>right alpha100</description>
			<left>66.6%</left>
			<top>0</top>
			<width>33.4%</width>
			<height>100%</height>
            <texture>colors/white.png</texture>
            <colordiffuse>FF000000</colordiffuse>
			<aspectratio>stretch</aspectratio>
        </control>
	</include>
	
				<!--

				fail
				<animation type="Conditional" condition="Skin.HasSetting(BackgroundAnimation)">
					<effect type="zoom" start="110" end="130" center="auto" time="10000" tween="cubic" easing="inout" pulse="true" />
					<effect type="slide" start="-10,-10" end="10,10" time="8000" tween="cubic" easing="inout" pulse="true" />
				</animation> -->
	
			<!-- use include to circumstance reload needs ? - also optional diffuse masking for bg image is also interesting -->
			<!-- need diff home vs common -->
			<!-- layer 1 is always fs and therefore just used used in backgroundcolor tag of windows global,home,spotlight --> 
			<!-- may use params for diff home vs global and save some variables  later on ? -->
	<include name="global_background">
		
		<control type="group">
			<include>HiddenObject</include>
			<control type="image" id="99006">
				<texture background="true">$VAR[FanartBackground]</texture>
				<visible>Skin.HasSetting(ShowFanartBackground) | $EXP[Spotlight_Layout] | Window.IsActive(filebrowser)</visible>
			</control>
			<include condition="Skin.HasSetting(ShowFanartBackground) + Skin.HasSetting(EnableRotatingExtraFanart)">backgroundbuilding_rotating_mutliplefanart</include>
		</control>
				
		<control type="group">
			
			<include content="VideoFullscreenBG" />
			
			<control type="image">
				<description>Layer2 Artwork - optional tint - if fanart bg enabled fetch by hidden control may get rid of 2nd ctrl - use backgroundtexture and texture vars</description>
				<depth>DepthBackground</depth>
				<texture diffuse="colors/white.png" background="true">$VAR[layer2_image]</texture>
				<aspectratio align="center" aligny="center">scale</aspectratio>
				<fadetime>600</fadetime>
				<include condition="!Skin.HasSetting(bg_use_coloredglass) + !window.isactive(weather)" content="colordiffuse_layer2_tint" />
				<visible>!$EXP[Spotlight_Layout]</visible>
				<animation effect="zoom" start="110" end="130" center="auto" time="10000" tween="cubic" easing="inout" pulse="true" condition="Skin.HasSetting(BackgroundAnimation) | Window.Is(settings)">Conditional</animation>
				<animation effect="slide" start="-10,-10" end="10,10" time="8000" tween="cubic" easing="inout" pulse="true" condition="Skin.HasSetting(BackgroundAnimation) | Window.Is(settings)">Conditional</animation>
			</control>
			<control type="image">
				<description>Layer2 pellucidoverlay - if artwork tint is unwished</description>
				<depth>DepthBackground</depth>
				<visible>Skin.HasSetting(bg_use_coloredglass) | window.isactive(weather)</visible>
				<visible>!$EXP[Spotlight_Layout]</visible>
				<colordiffuse>$VAR[color_universal_background_layer2]</colordiffuse>
				<texture>$VAR[texture_layer2_coloredglassoverlay]</texture>
			</control>
			
			<include content="backgroundbuilding_layer3" />
		
		</control>
		
      </include>
	
	
	<include name="window_frame">
		<control type="image">
			<description>funny optional window frame</description>
			<description>border round all - </description>
			<texture border="50" colordiffuse="ff000000" diffuse="special://skin/extras/preventfromzip/themed/bordercircle_100_inverted.png">special://skin/extras/preventfromzip/themed/white_100_hardedge.png</texture>
			<bordertexture border="50" colordiffuse="$VAR[window_frame_border_color]" diffuse="special://skin/extras/preventfromzip/themed/bordercircle_100.png">special://skin/extras/preventfromzip/themed/white_100_hardedge.png</bordertexture>
			<aspectratio scalediffuse="false">stretch</aspectratio>
		</control>
	</include>
	<variable name="window_frame_border_color">
		<value condition="Window.IsActive(addonsettings)">$VAR[color_global_dialog_accent]</value>
		<value>00ffffff</value>
	</variable>
	
	
    <include name="colordiffuse_layer2_tint">
		<colordiffuse>$VAR[color_universal_background_layer2]</colordiffuse>
	</include>
	
    <!-- 
check variables
<colordiffuse>$VAR[color_global_background_layer2]</colordiffuse>
<texture background="true">$VAR[FanartBackground]</texture>
need varaiable for texture diffuse="" blur vis control + multiimage control
 
 can be merged with global, var resvision + visible conds revision needed - to tired for that
use this include pr add variable fpr diffuse textures

-->
	
    <include name="GlobalBlurredBackground">
			
			<control type="image" id="99005">
				<include>HiddenObject</include>
				<description>blur container</description>
				<texture background="true">$VAR[BlurFanartBackground]</texture>
			</control>
			
			<control type="group">
				<include>VideoFullscreenBG</include>
				<visible>[$EXP[Spotlight_Layout] + Skin.HasSetting(spotlight_blur)] | !$EXP[Spotlight_Layout]</visible>
				<control type="image">
				<animation effect="fade" end="40" condition="Control.IsVisible(503) | Control.IsVisible(504)">conditional</animation>
					<description>conditional diffuse - blurred bg overlay img</description>
					<include condition="!Skin.HasSetting(bg_use_coloredglass)" content="colordiffuse_layer2_tint" />
					<texture>$INFO[Window(home).Property(listitem_blurred)]</texture>
				</control>
				
				<control type="image">
					<description>Layer2 Artwork Overlay - if artwork tint is unwished</description>
					<depth>DepthBackground</depth>
					<visible>Skin.HasSetting(bg_use_coloredglass)</visible>
					<visible>!$EXP[Spotlight_Layout]</visible>
					<colordiffuse>$VAR[color_global_background_layer2]</colordiffuse>
					<texture>colors/white70.png</texture>
				</control>
				<include condition="[!Window.IsActive(home) + !String.IsEmpty(Skin.String(texture_global_background_layer3))] | [Window.IsActive(home) + !String.IsEmpty(Skin.String(texture_home_background_layer3))]" content="backgroundbuilding_layer3" />
			</control>
    </include>
	
				<!-- not in use - experiment for bloom and or diffused panels [e.g. GradientFromRight].png -->
				<variable name="GradientBlurDiffusor">
					<value condition="Skin.HasSetting(GradientBlur)">image.png</value>
					<value></value>
				</variable>
				<variable name="GradientNonBlurDiffusor">
					<value condition="Skin.HasSetting(GradientBlur)">[e.g. GradientFromRight].png</value>
					<value></value>
				</variable>
	
	<!-- 
	<visible>!$EXP[Spotlight_ViewType] | $EXP[Infodialog_IsActive]</visible>
	=
	<visible>!$EXP[Spotlight_Layout]</visible>
	-->
			
	
	<include name="backgroundbuilding_layer3">
		<control type="image">
			<description>temp disabled for spotligth views, else share same image, maybe just optional share or disable in lib</description>
			<visible>!$EXP[Spotlight_Layout]</visible>
			<depth>DepthBackground2</depth>
			<texture>$VAR[backgroundbuilding_layer3_texture]</texture>
			<colordiffuse>$VAR[backgroundbuilding_layer3_color]</colordiffuse>
		</control>
	</include>
	<!-- 
	backgroundbuilding_layer3 unerheblich <animation effect="fade" start="100" end="0" time="300" condition="[Window.IsActive(home) + String.IsEqual(Skin.String(HomeLayout),Spotlight) + Player.HasVideo] | [!Window.IsActive(home) + $EXP[Spotlight_Layout] + Player.HasVideo]">Conditional</animation>
	backgroundbuilding_layer3 temp enabled - also check traileroverlayspotlight img var <visible>![$EXP[Spotlight_ViewType]]</visible>
	-->
				
	
	<!--  image cond if string not set it'll not be visible
	exception is spotlight trailer which needs a texture none if not set
	<variable name="backgroundbuilding_layer3_texture">
		<value condition="$EXP[IsHome] + !String.IsEmpty(Skin.String(texture_home_background_layer3))">$INFO[Skin.String(texture_home_background_layer3)]</value>
		<value condition="!$EXP[IsHome] + !String.IsEmpty(Skin.String(texture_global_background_layer3))">$INFO[Skin.String(texture_global_background_layer3)]</value>
		<value>colors/none.png</value>
	</variable>
	-->
		
	<variable name="backgroundbuilding_layer3_texture">
		<value condition="$EXP[IsHome] + !String.IsEmpty(Skin.String(texture_home_background_layer3))">$INFO[Skin.String(texture_home_background_layer3)]</value>
		<value condition="!$EXP[IsHome]">$INFO[Skin.String(texture_global_background_layer3)]</value>
	</variable>
	<variable name="backgroundbuilding_layer3_color">
		<value condition="$EXP[IsHome] + !String.IsEmpty(Skin.String(texture_home_background_layer3))">$VAR[color_home_background_layer3]</value>
		<value condition="!$EXP[IsHome]">$VAR[color_global_background_layer3]</value>
	</variable>
	
	<include name="backgroundbuilding_rotating_mutliplefanart">
		<control type="fadelabel" id="99007">
			<visible>Window.IsMedia</visible>
			
			<info>Container.ListItem.Art(fanart)</info>
			<info>Container.ListItem.Art(fanart1)</info>
			<info>Container.ListItem.Art(fanart2)</info>
			<info>Container.ListItem.Art(fanart3)</info>
			<info>Container.ListItem.Art(fanart4)</info>
			<info>Container.ListItem.Art(fanart5)</info>
			<info>Container.ListItem.Art(fanart6)</info>
			<info>Container.ListItem.Art(fanart7)</info>
			<info>Container.ListItem.Art(fanart8)</info>
			<info>Container.ListItem.Art(fanart9)</info>
			<info>Container.ListItem.Art(fanart10)</info>
			<info>Container.ListItem.Art(fanart11)</info>
			<info>Container.ListItem.Art(fanart12)</info>
			<info>Container.ListItem.Art(fanart13)</info>
			<info>Container.ListItem.Art(fanart14)</info>
			<info>Container.ListItem.Art(fanart15)</info>
			<info>Container.ListItem.Art(fanart16)</info>
			<info>Container.ListItem.Art(fanart17)</info>
			<info>Container.ListItem.Art(fanart18)</info>
			<info>Container.ListItem.Art(fanart19)</info>
			<info>Container.ListItem.Art(fanart20)</info>
			
			<info>Container.ListItem.Art(tvshow.fanart)</info>
			<info>Container.ListItem.Art(tvshow.fanart1)</info>
			<info>Container.ListItem.Art(tvshow.fanart2)</info>
			<info>Container.ListItem.Art(tvshow.fanart3)</info>
			<info>Container.ListItem.Art(tvshow.fanart4)</info>
			<info>Container.ListItem.Art(tvshow.fanart5)</info>
			<info>Container.ListItem.Art(tvshow.fanart6)</info>
			<info>Container.ListItem.Art(tvshow.fanart7)</info>
			<info>Container.ListItem.Art(tvshow.fanart8)</info>
			<info>Container.ListItem.Art(tvshow.fanart9)</info>
			<info>Container.ListItem.Art(tvshow.fanart10)</info>
			<info>Container.ListItem.Art(tvshow.fanart11)</info>
			<info>Container.ListItem.Art(tvshow.fanart12)</info>
			<info>Container.ListItem.Art(tvshow.fanart13)</info>
			<info>Container.ListItem.Art(tvshow.fanart14)</info>
			<info>Container.ListItem.Art(tvshow.fanart15)</info>
			<info>Container.ListItem.Art(tvshow.fanart16)</info>
			<info>Container.ListItem.Art(tvshow.fanart17)</info>
			<info>Container.ListItem.Art(tvshow.fanart18)</info>
			<info>Container.ListItem.Art(tvshow.fanart19)</info>
			<info>Container.ListItem.Art(tvshow.fanart20)</info>
			<!-- 
			<info>Container.ListItem.Art(set.fanart)</info>
			<info>Container.ListItem.Art(set.fanart1)</info>
			<info>Container.ListItem.Art(set.fanart2)</info>
			<info>Container.ListItem.Art(set.fanart3)</info>
			<info>Container.ListItem.Art(set.fanart4)</info>
			<info>Container.ListItem.Art(set.fanart5)</info>
			<info>Container.ListItem.Art(set.fanart6)</info>
			<info>Container.ListItem.Art(set.fanart7)</info>
			<info>Container.ListItem.Art(set.fanart8)</info>
			<info>Container.ListItem.Art(set.fanart9)</info>
			<info>Container.ListItem.Art(set.fanart10)</info>
			<info>Container.ListItem.Art(set.fanart11)</info>
			<info>Container.ListItem.Art(set.fanart12)</info>
			<info>Container.ListItem.Art(set.fanart13)</info>
			<info>Container.ListItem.Art(set.fanart14)</info>
			<info>Container.ListItem.Art(set.fanart15)</info>
			<info>Container.ListItem.Art(set.fanart16)</info>
			<info>Container.ListItem.Art(set.fanart17)</info>
			<info>Container.ListItem.Art(set.fanart18)</info>
			<info>Container.ListItem.Art(set.fanart19)</info>
			<info>Container.ListItem.Art(set.fanart20)</info>
			 -->
			<info>Container.ListItem.Art(artist.fanart)</info>
			<info>Container.ListItem.Art(artist.fanart1)</info>
			<info>Container.ListItem.Art(artist.fanart2)</info>
			<info>Container.ListItem.Art(artist.fanart3)</info>
			<info>Container.ListItem.Art(artist.fanart4)</info>
			<info>Container.ListItem.Art(artist.fanart5)</info>
			<info>Container.ListItem.Art(artist.fanart6)</info>
			<info>Container.ListItem.Art(artist.fanart7)</info>
			<info>Container.ListItem.Art(artist.fanart8)</info>
			<info>Container.ListItem.Art(artist.fanart9)</info>
			<info>Container.ListItem.Art(artist.fanart10)</info>
			<info>Container.ListItem.Art(artist.fanart11)</info>
			<info>Container.ListItem.Art(artist.fanart12)</info>
			<info>Container.ListItem.Art(artist.fanart13)</info>
			<info>Container.ListItem.Art(artist.fanart14)</info>
			<info>Container.ListItem.Art(artist.fanart15)</info>
			<info>Container.ListItem.Art(artist.fanart16)</info>
			<info>Container.ListItem.Art(artist.fanart17)</info>
			<info>Container.ListItem.Art(artist.fanart18)</info>
			<info>Container.ListItem.Art(artist.fanart19)</info>
			<info>Container.ListItem.Art(artist.fanart20)</info>
			<randomize>true</randomize>
			<pauseatend>5000</pauseatend>
			<scroll>false</scroll>
			<scrollout>false</scrollout>
		</control>
	</include>

	<!-- 99006 -->
	<!-- actors,years,studio,genre...
		"Container.Content(Genres) + Skin.String(moviegenrefanart.path)" $INFO[Skin.String(moviegenrefanartpath)]/$INFO[ListItem.Label].jpg
		studio dont stretch
		"Container.Content(Studios)" $INFO[Skin.String(moviegenrefanartpath)]/$INFO[ListItem.Label].jpg
	-->
		
	<variable name="FanartBackground">
		<value condition="[[$EXP[IsEpisode]] | [$EXP[IsSeason]]] + [!String.IsEmpty(ListItem.Art(fanart)) + !String.IsEqual(ListItem.Art(tvshow.fanart), ListItem.Art(fanart))]">$INFO[ListItem.Art(fanart)]</value>
		<value condition="!String.IsEmpty(ListItem.Art(Season.Fanart))">$INFO[ListItem.Art(season.fanart)]</value>
		<value condition="!String.IsEmpty(ListItem.Art(artist.fanart))">$INFO[ListItem.Art(artist.fanart)]</value>
		<value condition="!String.IsEmpty(ListItem.Art(albumartist.fanart))">$INFO[ListItem.Art(albumartist.fanart)]</value>
		<value condition="!String.IsEmpty(ListItem.Art(tvshow.fanart))">$INFO[ListItem.Art(tvshow.fanart)]</value>
		<value condition="!String.IsEmpty(ListItem.Art(fanart))">$INFO[ListItem.Art(fanart)]</value>
		<value condition="!String.IsEmpty(Container.ListItem.Art(fanart))">$INFO[Container.ListItem.Art(fanart)]</value>
		<value condition="!String.IsEmpty(Container.Art(fanart))">$INFO[Container.Art(fanart)]</value>
		<value condition="Window.Is(home) + !String.IsEmpty(ListItem.Property(fanart))">$INFO[ListItem.Property(fanart)]</value>
	</variable>
		
		<value condition="!String.IsEmpty(ListItem.Art(artist.fanart))">$INFO[ListItem.Art(artist.fanart)]</value>
		<value condition="!String.IsEmpty(ListItem.Art(albumartist.fanart))">$INFO[ListItem.Art(albumartist.fanart)]</value>
		<value condition="!String.IsEmpty(ListItem.Art(fanart))">$INFO[ListItem.Art(fanart)]</value>
		<value condition="!String.IsEmpty(ListItem.Art(album.thumb))">$INFO[ListItem.Art(album.thumb)]</value>
	
	
	<!-- 
		<value condition="!String.IsEmpty(ListItem.Art(set.fanart))">$INFO[ListItem.Art(set.fanart)]</value>
		<value condition="Window.Is(home) + !String.IsEmpty(ListItem.ActualIcon)">$INFO[ListItem.ActualIcon]</value>
	-->
		
	
	<!-- 99005 -->
	<variable name="BlurFanartBackground">
		<value condition="Skin.HasSetting(ShowFanartBackground)">$VAR[FanartBackground]</value>
		<value condition="!Skin.HasSetting(ShowFanartBackground) + !String.IsEmpty(Skin.String(texture_global_background_layer2))">$INFO[Skin.String(texture_global_background_layer2)]</value>
	</variable>
	
	<include name="VideoFullscreenBG">
		<control type="videowindow">
			<visible>![Control.IsVisible(503) | Control.IsVisible(504)]</visible>
			<visible>$EXP[IsCurrentyPlayingCommon]</visible>
		</control>
	</include>
	
	
	<!-- note CLEANUP - go over blurr include and merge -->
	
	<!-- <value condition="Control.IsVisible(99006) + !String.IsEmpty(Control.GetLabel(99006)) + Skin.HasSetting(BlurEnabled)">$INFO[Window(home).Property(listitem_blurred)]</value> -->
	<!-- not needed <value condition="$EXP(IsHome) + Skin.String(texture_home_background_layer2)">$INFO[Skin.String(texture_home_background_layer2)]</value> -->
		
	<variable name="layer2_image">
		<value condition="$EXP[IsCurrentyPlayingCommon] + !Skin.HasSetting(bg_use_coloredglass)">colors/white70.png</value>
		<value condition="$EXP[IsCurrentyPlayingCommon] + Skin.HasSetting(bg_use_coloredglass)">colors/none.png</value>
		<value condition="!String.IsEmpty(ListItem.Art(animatedfanart)) + Skin.HasSetting(animatedfanart)">$INFO[ListItem.Art(animatedfanart)]</value>
		<value condition="Control.IsVisible(99007) + !String.IsEmpty(Control.GetLabel(99007))">$INFO[Control.GetLabel(99007)]</value>
		<value condition="Control.IsVisible(99006) + !String.IsEmpty(Control.GetLabel(99006)) + !Skin.HasSetting(BlurEnabled)">$INFO[Control.GetLabel(99006)]</value>
		<value condition="Window.IsActive(weather) + [!Skin.HasSetting(weather_background_multiimage) + !Skin.HasSetting(weather_background_singleimage)]">special://skin/extras/weather/clouds.gif</value>
		<value condition="Window.IsActive(weather) + Skin.HasSetting(weather_background_multiimage)"></value>
		<value condition="Window.IsActive(weather) + Skin.HasSetting(weather_background_singleimage)">$INFO[Weather.FanartCode,resource://resource.images.weatherfanart.single/,.jpg]</value>
		<value condition="!$EXP(IsHome) + Skin.String(texture_global_background_layer2)">$INFO[Skin.String(texture_global_background_layer2)]</value>
		<value>resource://resource.images.skin.swan/backgroundimages/gradienta-bKESVqfxass-unsplash.jpg</value>
	</variable>
	
	<variable name="texture_layer2_coloredglassoverlay">
		<value condition="$EXP[IsCurrentyPlayingCommon]">colors/white70.png</value>
		<value condition="Window.IsActive(weather) + [Skin.HasSetting(weather_background_multiimage) | Skin.HasSetting(weather_background_singleimage)]">colors/white40.png</value>
		<value>colors/white80.png</value>
	</variable>
	
	<variable name="texture_global_headerbar">
		<value condition="!String.IsEmpty(Skin.String(texture_global_headerbar))">$INFO[Skin.String(texture_global_headerbar)]</value>
		<value>colors/white.png</value>
	</variable>
	
	<include name="Rotating_MusicPlayerFanartBackground">
		
		<control type="fadelabel" id="77707">
			<visible>Window.Is(visualisation) | Window.IsActive(home)</visible>
			<info>Player.Art(artist.fanart)</info>
			<info>Player.Art(artist.fanart1)</info>
			<info>Player.Art(artist.fanart2)</info>
			<info>Player.Art(artist.fanart3)</info>
			<info>Player.Art(artist.fanart4)</info>
			<info>Player.Art(artist.fanart5)</info>
			<info>Player.Art(artist.fanart6)</info>
			<info>Player.Art(artist.fanart7)</info>
			<info>Player.Art(artist.fanart8)</info>
			<info>Player.Art(artist.fanart9)</info>
			<info>Player.Art(artist.fanart10)</info>
			<info>Player.Art(artist.fanart11)</info>
			<info>Player.Art(artist.fanart12)</info>
			<info>Player.Art(artist.fanart13)</info>
			<info>Player.Art(artist.fanart14)</info>
			<info>Player.Art(artist.fanart15)</info>
			<info>Player.Art(artist.fanart16)</info>
			<info>Player.Art(artist.fanart17)</info>
			<info>Player.Art(artist.fanart18)</info>
			<info>Player.Art(artist.fanart19)</info>
			<info>Player.Art(artist.fanart20)</info>
			<info>Player.Art(album.thumb)</info>
			<info>Player.Art(albumartist.fanart)</info>
			<info>Player.Art(albumartist.fanart1)</info>
			<info>Player.Art(albumartist.fanart2)</info>
			<info>Player.Art(albumartist.fanart3)</info>
			<info>Player.Art(albumartist.fanart4)</info>
			<info>Player.Art(albumartist.fanart5)</info>
			<info>Player.Art(albumartist.fanart6)</info>
			<info>Player.Art(albumartist.fanart7)</info>
			<info>Player.Art(albumartist.fanart8)</info>
			<info>Player.Art(albumartist.fanart9)</info>
			<info>Player.Art(albumartist.fanart10)</info>
			<info>Player.Art(albumartist.fanart11)</info>
			<info>Player.Art(albumartist.fanart12)</info>
			<info>Player.Art(albumartist.fanart13)</info>
			<info>Player.Art(albumartist.fanart14)</info>
			<info>Player.Art(albumartist.fanart15)</info>
			<info>Player.Art(albumartist.fanart16)</info>
			<info>Player.Art(albumartist.fanart17)</info>
			<info>Player.Art(albumartist.fanart18)</info>
			<info>Player.Art(albumartist.fanart19)</info>
			<info>Player.Art(albumartist.fanart20)</info>
			<randomize>true</randomize>
			<pauseatend>5000</pauseatend>
			<scroll>false</scroll>
			<scrollout>false</scrollout>
		</control>
	</include>
	
	<variable name="MusicPlayerBackground">
		<value condition="Control.IsVisible(77707) + !String.IsEmpty(Control.GetLabel(77707))">$INFO[Control.GetLabel(77707)]</value>
		<value condition="Control.IsVisible(77706) + !String.IsEmpty(Control.GetLabel(77706))">$INFO[Control.GetLabel(77706)]</value>
		<value>resource://resource.images.skin.swan/backgroundimages/pattern1.jpg</value>
	</variable>
	<variable name="MusicPlayerBackgroundVar">
		<value condition="!String.IsEmpty(Player.Art(artist.fanart))">$INFO[Player.Art(artist.fanart)]</value>
		<value condition="!String.IsEmpty(Player.Art(albumartist.fanart))">$INFO[Player.Art(albumartist.fanart)]</value>
		<value condition="!String.IsEmpty(Player.Art(fanart))">$INFO[Player.Art(fanart)]</value>
		<value condition="!String.IsEmpty(Player.Art(album.thumb))">$INFO[Player.Art(album.thumb)]</value>
		<value>resource://resource.images.skin.swan/backgroundimages/pattern1.jpg</value>
	</variable>
	<include name="View_BGPanel">
		<control type="image">
			<description>optional panel</description>
			<left>0</left>
			<right>0</right>
			<width>100%</width>
			<top>0</top>
			<bottom>0</bottom>
			<texture colordiffuse="$VAR[color_lib_backgroundlayer4]">colors/white50.png</texture>
		</control>
		<control type="image">
			<description>optional panel left</description>
			<left>0</left>
			<width>$PARAM[width2]</width>
			<top>0</top>
			<bottom>0</bottom>
			<texture colordiffuse="$VAR[color_lib_backgroundlayer4]">colors/white50.png</texture>
		</control>
		<control type="image">
			<description>optional panel right</description>
			<right>0</right>
			<width>$PARAM[width3]</width>
			<top>0</top>
			<bottom>0</bottom>
			<texture colordiffuse="$VAR[color_lib_backgroundlayer4]">colors/white50.png</texture>
		</control>
	</include>
</includes>