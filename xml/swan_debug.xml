<?xml version="1.0" encoding="utf-8"?>
<!-- SWAN -->
<includes>

<!-- gamplayer labels ? $INFO[Game.Title,]
$INFO[Game.Platform,Game.Platform ,]
$INFO[Game.Genres,Game.Genres ,]
$INFO[Game.Publisher,Game.Publisher ,]
$INFO[Game.Developer,Game.Developer ,]
$INFO[Game.Overview,Game.Overview ,]
$INFO[Game.Year,Game.Year ,]
$INFO[Game.GameClient,Game.GameClient ,] -->
	<variable name="Player.DisplayAfterSeek">
		<value condition="Player.DisplayAfterSeek">Player.DisplayAfterSeek : TRUE</value>
		<value condition="Player.HasPerformedSeek(3)">Player.HasPerformedSeek(3) : TRUE</value>
		<value>Player.DisplayAfterSeek | Player.HasPerformedSeek(3): false</value>
	</variable>
	
	<variable name="Player.Seeking">
		<value condition="Player.Seeking">Player.Seeking : TRUE</value>
		<value>Player.Seeking: false</value>
	</variable>
	<variable name="Player.SeekEnabled">
		<value condition="Player.SeekEnabled">Player.SeekEnabled : TRUE</value>
		<value>Player.SeekEnabled: false</value>
	</variable>
<variable name="debug_left">
<value>
backgroundbuilding:
-  hidden sourcing common_fanartbackground = $VAR[common_fanartbackground] 
-  showing ARTWORK            layer2_image = $VAR[layer2_image]
-  spotlight_fanartbackground~diffusedart  = $VAR[spotlight_fanartbackground]

- 99005                       BLUR   $INFO[Window(home).Property(listitem_blurred)]
- 99006              COMMON   $INFO[Control.GetLabel(99006)]
- 99007    ROTATE EXTRA   $INFO[Control.GetLabel(99007)]

listitem.Path :  $INFO[listitem.path]   |   ListItem.FolderPath :  $INFO[ListItem.FolderPath]   |   ListItem.FolderName :  $INFO[ListItem.FolderName]
listitem.filenameandpath :  $INFO[listitem.filenameandpath]   |   listitem.fileextension $INFO[listitem.listitem.fileextension]
listitem.dbid :  $INFO[listitem.dbid]   |   listitem.tvshowdbid :  $INFO[listitem.tvshowdbid]   |   listitem.setid :  $INFO[listitem.setid]
listitem.uniquiid() • imdb :  $INFO[listitem.uniqueid(imdb)]  -  themoviedb :  $INFO[listitem.uniqueid(themoviedb)]  -  tmdb :  $INFO[listitem.uniqueid(tmdb)]  -  anidb :  $INFO[listitem.uniqueid(anidb)]  -  tvdb :  $INFO[listitem.uniqueid(tvdb)]  -  trakt :  $INFO[listitem.uniqueid(trakt)]  - tvrage :  $INFO[listitem.uniqueid(tvrage)]  -  tvmaze :  $INFO[listitem.uniqueid(tvmaze)]
listitem.overlay  $INFO[listitem.overlay]

container.listitem.label  :  $INFO[container.listitem.label]   |   container.listitem.label2  :  $INFO[container.listitem.label2]
container.content  :  $INFO[container.content]  ; container.listitem.dbtype  :  $INFO[container.listitem.dbtype]
container.viewmode :  $INFO[container.viewmode]  -  container.viewcount  :  $INFO[container.viewcount] - container.sortmethod  $INFO[container.sortmethod]
container.pluginname :  $INFO[container.pluginname]  -  container.plugincategory  :  $INFO[container.plugincategory]
container.folderpath :  $INFO[container.folderpath]
container().listitemabsolute(0).label :  $INFO[container().listitemabsolute(0).label]   |   container.listitem.year  :  $INFO[container.listitem.year]   |   container.totaltime  :  $INFO[container.totaltime]

MusicPlayer.Offset(1).PlaylistPosition : $INFO[MusicPlayer.Offset(1).PlaylistPosition]
[B]Ratings:[/B]
   userrating   $INFO[ListItem.UserRating]   |   rating   $INFO[ListItem.Rating]   |   themoviedb   $INFO[ListItem.Rating(themoviedb)]   |   imdb   $INFO[ListItem.Rating(imdb)]   |   tvdb   $INFO[ListItem.Rating(tvdb)]   |   metacritic   $INFO[ListItem.Rating(metacritic)]   |   tomatometerallaudience   $INFO[ListItem.Rating(tomatometerallaudience)]   |   tomatometerallcritics   $INFO[ListItem.Rating(tomatometerallcritics)]   |   tomatometeravgaudience   $INFO[ListItem.Rating(tomatometeravgaudience)]   |   tomatometeraavgcritics   $INFO[ListItem.Rating(tomatometeraavgcritics)] 
   Property album_rating   $INFO[Listitem.Property(Album_Rating)]   |   Property album_userrating   $INFO[Listitem.Property(Album_UserRating)]
[B]Artwork :[/B] 
   ImageLayout_fanart $VAR[ImageLayout_fanart,[COLOR cyan][B],[/B][/COLOR]]
   ListItem.ActualIcon : $INFO[ListItem.ActualIcon]
   ListItem.Icon : $INFO[ListItem.Icon]
   ListItem.epgEventIcon : $INFO[ListItem.epgEventIcon]
   ListItem.Art(thumb) : $INFO[ListItem.Art(thumb)]
   Container.Art(fanart) : $INFO[Container.Art(fanart)]
   ListItem.Art(fanart) : $INFO[ListItem.Art(fanart)]
   ListItem.Art(tvshow.fanart) : $INFO[ListItem.Art(tvshow.fanart)]
   ListItem.Art(artist.fanart) : $INFO[ListItem.Art(artist.fanart)]
   ListItem.Art(albumartist.fanart) : $INFO[ListItem.Art(albumartist.fanart)]
   Container.ListItem.Art(fanart) : $INFO[Container.ListItem.Art(fanart)]
   Container.ListItem.Art(tvshow.fanart) : $INFO[Container.ListItem.Art(tvshow.fanart)]
   Container.ListItem.Art(artist.fanart) : $INFO[Container.ListItem.Art(artist.fanart)]
   Container.ListItem.Art(albumartist.fanart) : $INFO[Container.ListItem.Art(albumartist.fanart)]</value>
</variable>

<variable name="stored_listitemprops">
<value>[COLOR FFFF2820]&gt;&gt;  S K I N    P R O P E R T Y S :
stored listitemtrailer    $INFO[window(home).Property(listitemtrailer)]
stored [B]TVSHOW[/B] dbid    $INFO[window(home).Property(dbid)]
stored [B]TVSHOW[/B] rating    $INFO[window(home).Property(rating)]
stored [B]TVSHOW[/B] totalseasons    $INFO[window(home).Property(totalseasons)]
stored [B]TVSHOW[/B] totalepisodes    $INFO[window(home).Property(totalepisodes)]
stored [B]TVSHOW[/B] status    $INFO[window(home).Property(status)]
stored Album_Description    $INFO[window(home).Property(Album_Description)]
stored movie_tmdbid    $INFO[window(home).Property(movie_tmdbid)]
stored tvshow_tmdbid    $INFO[window(home).Property(tvshow_tmdbid)]
stored episodetvshow_tmdbid    $INFO[window(home).Property(episodetvshow_tmdbid)]

SHORTCUT ONLY: $INFO[Window(home).Property(shortcutitem_nr),- window Prop Shortcuts ,]$INFO[Window(home).Property(shortcutaction_inprogress), - window Prop shortcutaction_inprogress ,][/COLOR]
</value>
</variable>

<variable name="emb_helper">
<value>[COLOR green2]&gt;&gt;  E M B U A R Y    H E L P E R  [I]hidden container(2000)[/I]:  •  $VAR[emb_helper_container2000_label]  •
$INFO[container(2000).listitem.dbtype,dbtype :  , [I]has[/I] ]$INFO[container(2000).listitem.dbid,  dbid : ,   |   ]$INFO[container(2000).listitem.label,label : , ]
ratings:  default $INFO[container(2000).listitem.rating(default)]   |   themoviedb $INFO[container(2000).listitem.rating(themoviedb)] |  tmdb $INFO[container(2000).listitem.rating(tmdb)] |  imdb $INFO[container(2000).listitem.rating(imdb)]   |   metacritic $INFO[container(2000).listitem.rating(metacritic)]   |   tomatometerallaudience $INFO[container(2000).listitem.rating(tomatometerallaudience)]   |   tomatometerallcritics $INFO[container(2000).listitem.rating(tomatometerallcritics)]   |   imdbtop250 $INFO[container(2000).listitem.rating(imdbtop250)]tvdb $INFO[container(2000).listitem.rating(tvdb)] trakt $INFO[Container(2000).ListItem.Rating(trakt)][/COLOR]</value>
</variable>
<variable name="emb_helper_container2000_label">
	<value condition="!Control.IsVisible(2000)">not visible</value>
	<value condition="Control.IsVisible(2000) + [Integer.IsEqual(Container(2000).NumItems,0) + !Container(2000).IsUpdating]">visible but empty</value>
	<value condition="Control.IsVisible(2000) + [Integer.IsGreater(Container(2000).NumItems,0) + Container(2000).IsUpdating]">is updating $INFO[Container(2000).ListItem.Label]</value>
	<value condition="Control.IsVisible(2000) + [Integer.IsGreater(Container(2000).NumItems,0) + !Container(2000).IsUpdating]">is not updating $INFO[Container(2000).ListItem.Label]</value>
</variable>

<variable name="tmdb_helper">
<value>[COLOR green2]&gt;&gt;  T M d b     H E L P E R          •          $VAR[TMDbHelper.Service]          •          $VAR[TMDbHelper.TMDbHelper.EnableBlur]
TMDb_Rating $INFO[Window(Home).Property(TMDbHelper.ListItem.TMDb_Rating)]   |   IMDb_Rating $INFO[Window(Home).Property(TMDbHelper.ListItem.IMDb_Rating)]   |   Metacritic_Rating $INFO[Window(Home).Property(TMDbHelper.ListItem.Metacritic_Rating)]   |   RottenTomatoes_UserMeter $INFO[Window(Home).Property(TMDbHelper.ListItem.RottenTomatoes_UserMeter)]   |   RottenTomatoes_Rating $INFO[Window(Home).Property(TMDbHelper.ListItem.RottenTomatoes_Rating)]   |   Top250 $INFO[Window(Home).Property(TMDbHelper.ListItem.Top250)]   |   Trakt_Rating $INFO[Window(Home).Property(TMDbHelper.ListItem.Trakt_Rating)]
Status $INFO[Window(Home).Property(TMDbHelper.ListItem.Status)]   |   Next_Aired $INFO[Window(Home).Property(TMDbHelper.ListItem.Season)] $INFO[Window(Home).Property(TMDbHelper.ListItem.Episode)][/COLOR]
</value>
</variable>
<variable name="TMDbHelper.Service">
	<value condition="skin.hassetting(TMDbHelper.Service)">TMDbHelper.Service is [COLOR orange]ON[/COLOR]</value>
	<value>TMDbHelper.Service is  [COLOR red][B]off[/B][/COLOR]</value>
</variable>
<variable name="TMDbHelper.DisableArtwork">
	<value condition="skin.hassetting(TMDbHelper.DisableArtwork)">TMDbHelper: Artwork Service is [COLOR orange]Disabled[/COLOR]</value>
	<value>TMDbHelper: Artwork Service is off</value>
</variable>
<variable name="TMDbHelper.DisablePersonStats">
	<value condition="skin.hassetting(TMDbHelper.DisablePersonStats)">TMDbHelper: PersonStats Service is [COLOR orange]Disabled[/COLOR]</value>
	<value>TMDbHelper: PersonStats Service is on</value>
</variable>
<variable name="TMDbHelper.DisableExtendedProperties">
	<value condition="skin.hassetting(TMDbHelper.DisableExtendedProperties)">TMDbHelper: ExtendedProperties are [COLOR orange]Disabled[/COLOR]</value>
	<value>TMDbHelper: ExtendedProperties Service is on</value>
</variable>
<variable name="TMDbHelper.TMDbHelper.EnableBlur">
	<value condition="!skin.hassetting(TMDbHelper.EnableBlur)">TMDbHelper.EnableBlur [COLOR red][B]Disabled[/B][/COLOR]</value>
	<value>TMDbHelper.EnableBlur [COLOR orange][B]enabled[/B][/COLOR][CR]     image ListItem.BlurImage: $INFO[Window(Home).Property(TMDbHelper.ListItem.BlurImage)][CR]     image Blur.SourceImage: $INFO[window(home).property(TMDbHelper.Blur.SourceImage)][CR]     image Blur.SourceImage: Blur.Fallback: $INFO[window(home).property(TMDbHelper.Blur.Fallback)]</value>
</variable>
<!-- 
SetProperty(TMDbHelper.WidgetContainer,WIDGET_ID,Home) 	Specify a widget container ID to load info for. Note that the service monitor works automatically for dialogvideoinfo without a container ID specified.
Skin.ToggleSetting(TMDbHelper.ForceWidgetContainer) 	Forces widget container ID lookup to be used in info dialog
SetProperty(TMDbHelper.ServicePause,1) 	Pause the service monitor while the current window is active and has focus. Use with <onload> to stop a custom dialog from updating the service monitor. v4.4.34+
	
	SetProperty(TMDbHelper.WidgetContainer,WIDGET_ID,Home)
	SetProperty(TMDbHelper.Blur.SourceImage,poster,Home)
	SetProperty(TMDbHelper.Blur.Fallback,$INFO[Skin.String(texture_global_background_layer2)],Home)
-->
<variable name="trailer_available">
	<value condition="!String.IsEmpty(Window(home).Property(listitemtrailer)) + !String.IsEqual(Window(home).Property(listitemtrailer), listitem.trailer)">Local Trailer [B]is[/B] available</value>
	<value condition="!String.IsEmpty(listitem.trailer)">Scraped Trailer [B]is[/B] available</value>
	<value>Trailer is NOT available</value>
</variable>

<variable name="debug_PlayerShowInfo">
	<value condition="Player.ShowINFO">ShowINFO is true</value>
	<value condition="!Player.ShowINFO">ShowINFO is false</value>
</variable>

<variable name="PrevWindow">
	<value condition="Window.Previous(fullscreenvideo)">fullscreenvideo</value>
	<value condition="Window.Previous(visualisation)">visualisation</value>
	<value condition="Window.Previous(home)">home</value>
	<value>not tracked</value>
</variable>
<variable name="NextWindow">
	<value condition="Window.Next(fullscreenvideo)">fullscreenvideo</value>
	<value condition="Window.Next(visualisation)">visualisation</value>
	<value>not tracked</value>
</variable>
<variable name="has_locked_content">
	<value condition="skin.hassetting(skin_locked_views)">[COLOR orange]skin has locked content[/COLOR]</value>
	<value condition="!skin.hassetting(skin_locked_views)">[COLOR cyan]skin has NOT LOCKED any content[/COLOR]</value>
</variable>
<variable name="OfflineMode">
	<value condition="!$EXP[IsOfflineMode]">Network [COLOR green]ONLINE[/COLOR]  STATUS</value>
	<value condition="$EXP[IsOfflineMode]">Network [COLOR red]OFFLINE[/COLOR]  STATUS</value>
</variable>

	<include name="swan_debug_overlay">
		<param name="nested_debug_infotop" default="" />
		<param name="nested_debuginfo" default="" />
		<definition>
		<control type="group">
			<visible>Skin.HasSetting(SwanDebug)</visible>
				<control type="image">
					<description>header space</description>
					<top>0</top>
					<width>100%</width>
					<height>Header</height>
					<texture>colors/white50.png</texture>
					<colordiffuse>CCffffff</colordiffuse>
				</control>
				<control type="image">
					<description>right scrollbar alphabet bar space</description>
					<top>0</top>
					<right>0</right>
					<width>BackgroundPanelRight</width>
					<height>100%</height>
					<texture>colors/white50.png</texture>
					<colordiffuse>CCffffff</colordiffuse>
				</control>
				<control type="image">
					<description>left menuiconbar space</description>
					<top>0</top>
					<left>0</left>
					<width>BackgroundPanelLeft</width>
					<height>100%</height>
					<texture>colors/white50.png</texture>
					<colordiffuse>CCffffff</colordiffuse>
				</control>
				<control type="image">
					<description>footer space</description>
					<bottom>0</bottom>
					<width>100%</width>
					<height>Footer</height>
					<texture>colors/white50.png</texture>
					<colordiffuse>CCffffff</colordiffuse>
				</control>
				
				<control type="group">
					<left>110</left>
					<right>110</right>
					<top>130</top>
					<bottom>130</bottom>
					<control type="image">
						<description>hot spot area</description>
						<texture>colors/white90.png</texture>
						<colordiffuse>ff101010</colordiffuse>
					</control>
					<control type="textbox">
						<font>notosans_12_semibold</font>
						<aligny>top</aligny>
						<align>left</align>
						<top>5</top>
						<left>5</left>
						<right>10</right>
						<autoscroll>true</autoscroll>
						<wrapmultiline>true</wrapmultiline>
						<textcolor>ffffffff</textcolor>
						<label>$PARAM[nested_debug_infotop]$VAR[stored_listitemprops][CR][CR]$VAR[emb_helper][CR][CR]$VAR[tmdb_helper][CR][CR][COLOR white]&gt;&gt;  C O R E    K O D I :$PARAM[nested_debuginfo]
$VAR[debug_left][/COLOR]
</label>
					</control>
					<control type="textbox">
						<font>notosans_15_semibold</font>
						<aligny>top</aligny>
						<align>right</align>
						<top>-10</top>
						<right>0</right>
						<textcolor>red</textcolor>
						<label>$INFO[System.BuildVersion,[B],[/B]]
System.BuildDate:     $INFO[System.BuildDate]
$LOCALIZE[31030] :     $INFO[system.memory(used)] [B]/[/B] $INFO[system.memory(total)]       $INFO[system.memory(used.percent)]
$LOCALIZE[13271]      $INFO[System.CPUUsage]
$INFO[System.GPUTemperature,System.GPUTemperature :     ,]
Property(xmlfile) :     $INFO[Window.Property(xmlfile)]
System.CurrentWindow :     $INFO[System.CurrentWindow]
System.CurrentControl :     $INFO[System.CurrentControl]
stored win(*current).Prop viewid :     $INFO[window.property(viewid)]   |   System.CurrentControlID :     $INFO[System.CurrentControlID]


$INFO[System.Progressbar,System.Progressbar :     ,]
• $VAR[OfflineMode]
  System.InternetState :     $INFO[System.InternetState]
  Network.LinkState :     $INFO[Network.LinkState]
  Network.IPAddress :     $INFO[Network.IPAddress]
  PrevWindow  - $VAR[PrevWindow]
  NextWindow  - $VAR[NextWindow]   
  
Window(home).Property(dialog_select) : $INFO[Window(home).Property(dialog_select)]
</label>
					</control>
				</control>
		</control>
		<control type="button">
			<visible>Skin.HasSetting(SwanDebug)</visible>
			<visible>!String.IsEmpty(ListItem.Folderpath) | !String.IsEmpty(Container.Folderpath)</visible>
			<texturefocus colordiffuse="red">colors/white.png</texturefocus>
			<texturenofocus colordiffuse="red">colors/white50.png</texturenofocus>
			<centerleft>60%</centerleft>
			<height>100</height>
			<width>500</width>
			<wrapmultiline>true</wrapmultiline>
			<label>Button :[CR]store container.folderpath to settings.xml</label>
			<onclick>Skin.SetString(SkinSaved_containerfoldepath,$INFO[Container.Folderpath])</onclick>
			<onclick>Skin.SetString(SkinSaved_listitemfoldepath,$INFO[ListItem.Folderpath])</onclick>
		</control>
		</definition>
	</include>
</includes>
